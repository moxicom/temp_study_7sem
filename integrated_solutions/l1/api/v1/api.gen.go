// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package apiv1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for TaskStatus.
const (
	TaskStatusDone       TaskStatus = "done"
	TaskStatusInProgress TaskStatus = "in_progress"
	TaskStatusTodo       TaskStatus = "todo"
)

// Defines values for TaskUpdateStatus.
const (
	TaskUpdateStatusDone       TaskUpdateStatus = "done"
	TaskUpdateStatusInProgress TaskUpdateStatus = "in_progress"
	TaskUpdateStatusTodo       TaskUpdateStatus = "todo"
)

// Project defines model for Project.
type Project struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          string     `json:"id"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
}

// ProjectCreate defines model for ProjectCreate.
type ProjectCreate struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// ProjectUpdate defines model for ProjectUpdate.
type ProjectUpdate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ProjectsResponse defines model for ProjectsResponse.
type ProjectsResponse = []Project

// Task defines model for Task.
type Task struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          string     `json:"id"`
	ProjectId   string     `json:"projectId"`
	Status      TaskStatus `json:"status"`
	Title       string     `json:"title"`
	UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
}

// TaskStatus defines model for Task.Status.
type TaskStatus string

// TaskCreate defines model for TaskCreate.
type TaskCreate struct {
	Description *string `json:"description,omitempty"`
	Title       string  `json:"title"`
}

// TaskUpdate defines model for TaskUpdate.
type TaskUpdate struct {
	Description *string           `json:"description,omitempty"`
	Status      *TaskUpdateStatus `json:"status,omitempty"`
	Title       *string           `json:"title,omitempty"`
}

// TaskUpdateStatus defines model for TaskUpdate.Status.
type TaskUpdateStatus string

// TasksResponse defines model for TasksResponse.
type TasksResponse = []Task

// PostProjectsParams defines parameters for PostProjects.
type PostProjectsParams struct {
	IdempotencyKey *string `json:"Idempotency-Key,omitempty"`
}

// PostProjectsProjectIdTasksParams defines parameters for PostProjectsProjectIdTasks.
type PostProjectsProjectIdTasksParams struct {
	IdempotencyKey *string `json:"Idempotency-Key,omitempty"`
}

// PostProjectsJSONRequestBody defines body for PostProjects for application/json ContentType.
type PostProjectsJSONRequestBody = ProjectCreate

// PutProjectsProjectIdJSONRequestBody defines body for PutProjectsProjectId for application/json ContentType.
type PutProjectsProjectIdJSONRequestBody = ProjectUpdate

// PostProjectsProjectIdTasksJSONRequestBody defines body for PostProjectsProjectIdTasks for application/json ContentType.
type PostProjectsProjectIdTasksJSONRequestBody = TaskCreate

// PutTasksTaskIdJSONRequestBody defines body for PutTasksTaskId for application/json ContentType.
type PutTasksTaskIdJSONRequestBody = TaskUpdate

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetProjects request
	GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsWithBody request with any body
	PostProjectsWithBody(ctx context.Context, params *PostProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjects(ctx context.Context, params *PostProjectsParams, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectsProjectId request
	DeleteProjectsProjectId(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsProjectId request
	GetProjectsProjectId(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProjectsProjectIdWithBody request with any body
	PutProjectsProjectIdWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProjectsProjectId(ctx context.Context, projectId string, body PutProjectsProjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsProjectIdTasks request
	GetProjectsProjectIdTasks(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsProjectIdTasksWithBody request with any body
	PostProjectsProjectIdTasksWithBody(ctx context.Context, projectId string, params *PostProjectsProjectIdTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectsProjectIdTasks(ctx context.Context, projectId string, params *PostProjectsProjectIdTasksParams, body PostProjectsProjectIdTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTasksTaskId request
	DeleteTasksTaskId(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasksTaskId request
	GetTasksTaskId(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTasksTaskIdWithBody request with any body
	PutTasksTaskIdWithBody(ctx context.Context, taskId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTasksTaskId(ctx context.Context, taskId string, body PutTasksTaskIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsWithBody(ctx context.Context, params *PostProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjects(ctx context.Context, params *PostProjectsParams, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectsProjectId(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectsProjectIdRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsProjectId(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsProjectIdRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectsProjectIdWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectsProjectIdRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectsProjectId(ctx context.Context, projectId string, body PutProjectsProjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectsProjectIdRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsProjectIdTasks(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsProjectIdTasksRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsProjectIdTasksWithBody(ctx context.Context, projectId string, params *PostProjectsProjectIdTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsProjectIdTasksRequestWithBody(c.Server, projectId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsProjectIdTasks(ctx context.Context, projectId string, params *PostProjectsProjectIdTasksParams, body PostProjectsProjectIdTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsProjectIdTasksRequest(c.Server, projectId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTasksTaskId(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTasksTaskIdRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasksTaskId(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksTaskIdRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTasksTaskIdWithBody(ctx context.Context, taskId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTasksTaskIdRequestWithBody(c.Server, taskId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTasksTaskId(ctx context.Context, taskId string, body PutTasksTaskIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTasksTaskIdRequest(c.Server, taskId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectsRequest calls the generic PostProjects builder with application/json body
func NewPostProjectsRequest(server string, params *PostProjectsParams, body PostProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostProjectsRequestWithBody generates requests for PostProjects with any type of body
func NewPostProjectsRequestWithBody(server string, params *PostProjectsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IdempotencyKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, *params.IdempotencyKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Idempotency-Key", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteProjectsProjectIdRequest generates requests for DeleteProjectsProjectId
func NewDeleteProjectsProjectIdRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsProjectIdRequest generates requests for GetProjectsProjectId
func NewGetProjectsProjectIdRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutProjectsProjectIdRequest calls the generic PutProjectsProjectId builder with application/json body
func NewPutProjectsProjectIdRequest(server string, projectId string, body PutProjectsProjectIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProjectsProjectIdRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewPutProjectsProjectIdRequestWithBody generates requests for PutProjectsProjectId with any type of body
func NewPutProjectsProjectIdRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectsProjectIdTasksRequest generates requests for GetProjectsProjectIdTasks
func NewGetProjectsProjectIdTasksRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectsProjectIdTasksRequest calls the generic PostProjectsProjectIdTasks builder with application/json body
func NewPostProjectsProjectIdTasksRequest(server string, projectId string, params *PostProjectsProjectIdTasksParams, body PostProjectsProjectIdTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsProjectIdTasksRequestWithBody(server, projectId, params, "application/json", bodyReader)
}

// NewPostProjectsProjectIdTasksRequestWithBody generates requests for PostProjectsProjectIdTasks with any type of body
func NewPostProjectsProjectIdTasksRequestWithBody(server string, projectId string, params *PostProjectsProjectIdTasksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IdempotencyKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, *params.IdempotencyKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Idempotency-Key", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteTasksTaskIdRequest generates requests for DeleteTasksTaskId
func NewDeleteTasksTaskIdRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTasksTaskIdRequest generates requests for GetTasksTaskId
func NewGetTasksTaskIdRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTasksTaskIdRequest calls the generic PutTasksTaskId builder with application/json body
func NewPutTasksTaskIdRequest(server string, taskId string, body PutTasksTaskIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTasksTaskIdRequestWithBody(server, taskId, "application/json", bodyReader)
}

// NewPutTasksTaskIdRequestWithBody generates requests for PutTasksTaskId with any type of body
func NewPutTasksTaskIdRequestWithBody(server string, taskId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetProjectsWithResponse request
	GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)

	// PostProjectsWithBodyWithResponse request with any body
	PostProjectsWithBodyWithResponse(ctx context.Context, params *PostProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error)

	PostProjectsWithResponse(ctx context.Context, params *PostProjectsParams, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error)

	// DeleteProjectsProjectIdWithResponse request
	DeleteProjectsProjectIdWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*DeleteProjectsProjectIdResponse, error)

	// GetProjectsProjectIdWithResponse request
	GetProjectsProjectIdWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectsProjectIdResponse, error)

	// PutProjectsProjectIdWithBodyWithResponse request with any body
	PutProjectsProjectIdWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectsProjectIdResponse, error)

	PutProjectsProjectIdWithResponse(ctx context.Context, projectId string, body PutProjectsProjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectsProjectIdResponse, error)

	// GetProjectsProjectIdTasksWithResponse request
	GetProjectsProjectIdTasksWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectsProjectIdTasksResponse, error)

	// PostProjectsProjectIdTasksWithBodyWithResponse request with any body
	PostProjectsProjectIdTasksWithBodyWithResponse(ctx context.Context, projectId string, params *PostProjectsProjectIdTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsProjectIdTasksResponse, error)

	PostProjectsProjectIdTasksWithResponse(ctx context.Context, projectId string, params *PostProjectsProjectIdTasksParams, body PostProjectsProjectIdTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsProjectIdTasksResponse, error)

	// DeleteTasksTaskIdWithResponse request
	DeleteTasksTaskIdWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*DeleteTasksTaskIdResponse, error)

	// GetTasksTaskIdWithResponse request
	GetTasksTaskIdWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetTasksTaskIdResponse, error)

	// PutTasksTaskIdWithBodyWithResponse request with any body
	PutTasksTaskIdWithBodyWithResponse(ctx context.Context, taskId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTasksTaskIdResponse, error)

	PutTasksTaskIdWithResponse(ctx context.Context, taskId string, body PutTasksTaskIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTasksTaskIdResponse, error)
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectsResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Project
}

// Status returns HTTPResponse.Status
func (r PostProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectsProjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProjectsProjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectsProjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsProjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r GetProjectsProjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsProjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProjectsProjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r PutProjectsProjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProjectsProjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsProjectIdTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TasksResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectsProjectIdTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsProjectIdTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsProjectIdTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Task
}

// Status returns HTTPResponse.Status
func (r PostProjectsProjectIdTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsProjectIdTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTasksTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTasksTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTasksTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r GetTasksTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTasksTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r PutTasksTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTasksTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// PostProjectsWithBodyWithResponse request with arbitrary body returning *PostProjectsResponse
func (c *ClientWithResponses) PostProjectsWithBodyWithResponse(ctx context.Context, params *PostProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjectsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsWithResponse(ctx context.Context, params *PostProjectsParams, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjects(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

// DeleteProjectsProjectIdWithResponse request returning *DeleteProjectsProjectIdResponse
func (c *ClientWithResponses) DeleteProjectsProjectIdWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*DeleteProjectsProjectIdResponse, error) {
	rsp, err := c.DeleteProjectsProjectId(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectsProjectIdResponse(rsp)
}

// GetProjectsProjectIdWithResponse request returning *GetProjectsProjectIdResponse
func (c *ClientWithResponses) GetProjectsProjectIdWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectsProjectIdResponse, error) {
	rsp, err := c.GetProjectsProjectId(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsProjectIdResponse(rsp)
}

// PutProjectsProjectIdWithBodyWithResponse request with arbitrary body returning *PutProjectsProjectIdResponse
func (c *ClientWithResponses) PutProjectsProjectIdWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectsProjectIdResponse, error) {
	rsp, err := c.PutProjectsProjectIdWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectsProjectIdResponse(rsp)
}

func (c *ClientWithResponses) PutProjectsProjectIdWithResponse(ctx context.Context, projectId string, body PutProjectsProjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectsProjectIdResponse, error) {
	rsp, err := c.PutProjectsProjectId(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectsProjectIdResponse(rsp)
}

// GetProjectsProjectIdTasksWithResponse request returning *GetProjectsProjectIdTasksResponse
func (c *ClientWithResponses) GetProjectsProjectIdTasksWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectsProjectIdTasksResponse, error) {
	rsp, err := c.GetProjectsProjectIdTasks(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsProjectIdTasksResponse(rsp)
}

// PostProjectsProjectIdTasksWithBodyWithResponse request with arbitrary body returning *PostProjectsProjectIdTasksResponse
func (c *ClientWithResponses) PostProjectsProjectIdTasksWithBodyWithResponse(ctx context.Context, projectId string, params *PostProjectsProjectIdTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsProjectIdTasksResponse, error) {
	rsp, err := c.PostProjectsProjectIdTasksWithBody(ctx, projectId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsProjectIdTasksResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsProjectIdTasksWithResponse(ctx context.Context, projectId string, params *PostProjectsProjectIdTasksParams, body PostProjectsProjectIdTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsProjectIdTasksResponse, error) {
	rsp, err := c.PostProjectsProjectIdTasks(ctx, projectId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsProjectIdTasksResponse(rsp)
}

// DeleteTasksTaskIdWithResponse request returning *DeleteTasksTaskIdResponse
func (c *ClientWithResponses) DeleteTasksTaskIdWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*DeleteTasksTaskIdResponse, error) {
	rsp, err := c.DeleteTasksTaskId(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTasksTaskIdResponse(rsp)
}

// GetTasksTaskIdWithResponse request returning *GetTasksTaskIdResponse
func (c *ClientWithResponses) GetTasksTaskIdWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetTasksTaskIdResponse, error) {
	rsp, err := c.GetTasksTaskId(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksTaskIdResponse(rsp)
}

// PutTasksTaskIdWithBodyWithResponse request with arbitrary body returning *PutTasksTaskIdResponse
func (c *ClientWithResponses) PutTasksTaskIdWithBodyWithResponse(ctx context.Context, taskId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTasksTaskIdResponse, error) {
	rsp, err := c.PutTasksTaskIdWithBody(ctx, taskId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTasksTaskIdResponse(rsp)
}

func (c *ClientWithResponses) PutTasksTaskIdWithResponse(ctx context.Context, taskId string, body PutTasksTaskIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTasksTaskIdResponse, error) {
	rsp, err := c.PutTasksTaskId(ctx, taskId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTasksTaskIdResponse(rsp)
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsResponse parses an HTTP response from a PostProjectsWithResponse call
func ParsePostProjectsResponse(rsp *http.Response) (*PostProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteProjectsProjectIdResponse parses an HTTP response from a DeleteProjectsProjectIdWithResponse call
func ParseDeleteProjectsProjectIdResponse(rsp *http.Response) (*DeleteProjectsProjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectsProjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProjectsProjectIdResponse parses an HTTP response from a GetProjectsProjectIdWithResponse call
func ParseGetProjectsProjectIdResponse(rsp *http.Response) (*GetProjectsProjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsProjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutProjectsProjectIdResponse parses an HTTP response from a PutProjectsProjectIdWithResponse call
func ParsePutProjectsProjectIdResponse(rsp *http.Response) (*PutProjectsProjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProjectsProjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProjectsProjectIdTasksResponse parses an HTTP response from a GetProjectsProjectIdTasksWithResponse call
func ParseGetProjectsProjectIdTasksResponse(rsp *http.Response) (*GetProjectsProjectIdTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsProjectIdTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TasksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsProjectIdTasksResponse parses an HTTP response from a PostProjectsProjectIdTasksWithResponse call
func ParsePostProjectsProjectIdTasksResponse(rsp *http.Response) (*PostProjectsProjectIdTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsProjectIdTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteTasksTaskIdResponse parses an HTTP response from a DeleteTasksTaskIdWithResponse call
func ParseDeleteTasksTaskIdResponse(rsp *http.Response) (*DeleteTasksTaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTasksTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTasksTaskIdResponse parses an HTTP response from a GetTasksTaskIdWithResponse call
func ParseGetTasksTaskIdResponse(rsp *http.Response) (*GetTasksTaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTasksTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTasksTaskIdResponse parses an HTTP response from a PutTasksTaskIdWithResponse call
func ParsePutTasksTaskIdResponse(rsp *http.Response) (*PutTasksTaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTasksTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List projects
	// (GET /projects)
	GetProjects(w http.ResponseWriter, r *http.Request)
	// Create project
	// (POST /projects)
	PostProjects(w http.ResponseWriter, r *http.Request, params PostProjectsParams)
	// Delete project
	// (DELETE /projects/{projectId})
	DeleteProjectsProjectId(w http.ResponseWriter, r *http.Request, projectId string)
	// Get project
	// (GET /projects/{projectId})
	GetProjectsProjectId(w http.ResponseWriter, r *http.Request, projectId string)
	// Update project
	// (PUT /projects/{projectId})
	PutProjectsProjectId(w http.ResponseWriter, r *http.Request, projectId string)
	// List tasks for project
	// (GET /projects/{projectId}/tasks)
	GetProjectsProjectIdTasks(w http.ResponseWriter, r *http.Request, projectId string)
	// Create task in project
	// (POST /projects/{projectId}/tasks)
	PostProjectsProjectIdTasks(w http.ResponseWriter, r *http.Request, projectId string, params PostProjectsProjectIdTasksParams)
	// Delete task
	// (DELETE /tasks/{taskId})
	DeleteTasksTaskId(w http.ResponseWriter, r *http.Request, taskId string)
	// Get task
	// (GET /tasks/{taskId})
	GetTasksTaskId(w http.ResponseWriter, r *http.Request, taskId string)
	// Update task
	// (PUT /tasks/{taskId})
	PutTasksTaskId(w http.ResponseWriter, r *http.Request, taskId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List projects
// (GET /projects)
func (_ Unimplemented) GetProjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create project
// (POST /projects)
func (_ Unimplemented) PostProjects(w http.ResponseWriter, r *http.Request, params PostProjectsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete project
// (DELETE /projects/{projectId})
func (_ Unimplemented) DeleteProjectsProjectId(w http.ResponseWriter, r *http.Request, projectId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get project
// (GET /projects/{projectId})
func (_ Unimplemented) GetProjectsProjectId(w http.ResponseWriter, r *http.Request, projectId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update project
// (PUT /projects/{projectId})
func (_ Unimplemented) PutProjectsProjectId(w http.ResponseWriter, r *http.Request, projectId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List tasks for project
// (GET /projects/{projectId}/tasks)
func (_ Unimplemented) GetProjectsProjectIdTasks(w http.ResponseWriter, r *http.Request, projectId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create task in project
// (POST /projects/{projectId}/tasks)
func (_ Unimplemented) PostProjectsProjectIdTasks(w http.ResponseWriter, r *http.Request, projectId string, params PostProjectsProjectIdTasksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete task
// (DELETE /tasks/{taskId})
func (_ Unimplemented) DeleteTasksTaskId(w http.ResponseWriter, r *http.Request, taskId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get task
// (GET /tasks/{taskId})
func (_ Unimplemented) GetTasksTaskId(w http.ResponseWriter, r *http.Request, taskId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update task
// (PUT /tasks/{taskId})
func (_ Unimplemented) PutTasksTaskId(w http.ResponseWriter, r *http.Request, taskId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjects operation middleware
func (siw *ServerInterfaceWrapper) PostProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostProjectsParams

	headers := r.Header

	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Idempotency-Key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Idempotency-Key", valueList[0], &IdempotencyKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Idempotency-Key", Err: err})
			return
		}

		params.IdempotencyKey = &IdempotencyKey

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjects(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProjectsProjectId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectsProjectId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", chi.URLParam(r, "projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectsProjectId(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectsProjectId operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsProjectId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", chi.URLParam(r, "projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectsProjectId(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutProjectsProjectId operation middleware
func (siw *ServerInterfaceWrapper) PutProjectsProjectId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", chi.URLParam(r, "projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutProjectsProjectId(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectsProjectIdTasks operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsProjectIdTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", chi.URLParam(r, "projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectsProjectIdTasks(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjectsProjectIdTasks operation middleware
func (siw *ServerInterfaceWrapper) PostProjectsProjectIdTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", chi.URLParam(r, "projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostProjectsProjectIdTasksParams

	headers := r.Header

	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Idempotency-Key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Idempotency-Key", valueList[0], &IdempotencyKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Idempotency-Key", Err: err})
			return
		}

		params.IdempotencyKey = &IdempotencyKey

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectsProjectIdTasks(w, r, projectId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTasksTaskId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTasksTaskId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", chi.URLParam(r, "taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTasksTaskId(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTasksTaskId operation middleware
func (siw *ServerInterfaceWrapper) GetTasksTaskId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", chi.URLParam(r, "taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTasksTaskId(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutTasksTaskId operation middleware
func (siw *ServerInterfaceWrapper) PutTasksTaskId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", chi.URLParam(r, "taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutTasksTaskId(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects", wrapper.GetProjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects", wrapper.PostProjects)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{projectId}", wrapper.DeleteProjectsProjectId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{projectId}", wrapper.GetProjectsProjectId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{projectId}", wrapper.PutProjectsProjectId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{projectId}/tasks", wrapper.GetProjectsProjectIdTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{projectId}/tasks", wrapper.PostProjectsProjectIdTasks)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/tasks/{taskId}", wrapper.DeleteTasksTaskId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks/{taskId}", wrapper.GetTasksTaskId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/tasks/{taskId}", wrapper.PutTasksTaskId)
	})

	return r
}

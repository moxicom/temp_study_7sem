#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ Appium –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
"""

import time
import logging
from typing import Optional
from appium import webdriver
from appium.options.android import UiAutomator2Options

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def test_driver_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ Appium"""
    driver = None
    
    try:
        logger.info("üîç –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ Appium")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        desired_caps = {
            "platformName": "Android",
            "automationName": "UiAutomator2",
            "deviceName": "Android Emulator",
            "appPackage": "com.google.android.keep",
            "appActivity": ".activities.BrowseActivity",
            "noReset": True,
            "newCommandTimeout": 60,
            "autoGrantPermissions": True,
            "unicodeKeyboard": True,
            "resetKeyboard": True
        }
        
        options = UiAutomator2Options().load_capabilities(desired_caps)
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"Platform: {desired_caps['platformName']}")
        logger.info(f"Automation: {desired_caps['automationName']}")
        logger.info(f"App Package: {desired_caps['appPackage']}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ (–±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –±–µ–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
        logger.info("üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Appium —Å–µ—Ä–≤–µ—Ä—É...")
        
        try:
            driver = webdriver.Remote("http://127.0.0.1:4723", options=options)
            logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
            current_activity = driver.current_activity
            logger.info(f"–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {current_activity}")
            
            return True
            
        except Exception as e:
            if "No devices found" in str(e) or "device" in str(e).lower():
                logger.warning("‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ —ç–º—É–ª—è—Ç–æ—Ä–∞)")
                logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Ç–æ–ª—å–∫–æ –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
                return False
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
        
    finally:
        if driver:
            try:
                driver.quit()
                logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except:
                pass


def test_appium_server_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Appium —Å–µ—Ä–≤–µ—Ä—É"""
    try:
        logger.info("üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Appium —Å–µ—Ä–≤–µ—Ä—É")
        
        import requests
        
        response = requests.get("http://127.0.0.1:4723/status", timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("value", {}).get("ready"):
                logger.info("‚úÖ Appium —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤")
                return True
            else:
                logger.error("‚ùå Appium —Å–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤")
                return False
        else:
            logger.error(f"‚ùå Appium —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        logger.error("‚ùå Appium —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Appium: make run-appium")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ Appium")
    logger.info("=" * 50)
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    server_ok = test_appium_server_connection()
    
    if not server_ok:
        logger.error("‚ùå Appium —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return 1
    
    logger.info("")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
    driver_ok = test_driver_creation()
    
    logger.info("")
    logger.info("=" * 50)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 50)
    
    if driver_ok:
        logger.info("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: –ü–†–û–ô–î–ï–ù")
        logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π!")
        logger.info("")
        logger.info("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        logger.info("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä: make run-emulator")
        logger.info("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: make test")
        return 0
    else:
        logger.error("‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: –ù–ï –ü–†–û–ô–î–ï–ù")
        return 1


if __name__ == "__main__":
    exit(main())

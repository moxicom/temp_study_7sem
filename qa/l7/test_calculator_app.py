#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Appium –∏ Python
"""

import time
import logging
from typing import Optional
from appium import webdriver
from appium.options.android import UiAutomator2Options
from appium.webdriver.common.appiumby import AppiumBy
from selenium.common.exceptions import NoSuchElementException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('calculator_test_results.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class CalculatorTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
    
    def __init__(self):
        self.driver: Optional[webdriver.Remote] = None
        self.appium_server_url = "http://127.0.0.1:4723"
        
    def setup_driver(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Appium –¥—Ä–∞–π–≤–µ—Ä—É"""
        try:
            desired_caps = {
                "platformName": "Android",
                "automationName": "UiAutomator2",
                "deviceName": "Android Emulator",
                "appPackage": "com.google.android.calculator",
                "appActivity": "com.android.calculator2.Calculator",
                "noReset": True,
                "newCommandTimeout": 60,
                "autoGrantPermissions": True,
                "unicodeKeyboard": True,
                "resetKeyboard": True
            }
            
            options = UiAutomator2Options().load_capabilities(desired_caps)
            self.driver = webdriver.Remote(self.appium_server_url, options=options)
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Appium —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Appium: {e}")
            return False
    
    def test_app_launch(self) -> bool:
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å
            current_activity = self.driver.current_activity
            logger.info(f"–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {current_activity}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            try:
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ü–∏—Ñ—Ä—ã (–æ–±—ã—á–Ω–æ "0")
                digit_button = self.driver.find_element(
                    AppiumBy.XPATH, 
                    "//android.widget.Button[@text='0']"
                )
                logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
                return True
                
            except NoSuchElementException:
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                try:
                    digit_button = self.driver.find_element(
                        AppiumBy.XPATH, 
                        "//android.widget.Button[contains(@text, '0')]"
                    )
                    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω–æ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä)")
                    return True
                except NoSuchElementException:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")
            return False
    
    def test_basic_calculation(self) -> bool:
        """–¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ (2 + 3 = 5)"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ (2 + 3 = 5)")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "2"
            button_2 = self.driver.find_element(
                AppiumBy.XPATH, 
                "//android.widget.Button[@text='2']"
            )
            button_2.click()
            logger.info("‚úÖ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '2'")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "+"
            button_plus = self.driver.find_element(
                AppiumBy.XPATH, 
                "//android.widget.Button[@text='+']"
            )
            button_plus.click()
            logger.info("‚úÖ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '+'")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "3"
            button_3 = self.driver.find_element(
                AppiumBy.XPATH, 
                "//android.widget.Button[@text='3']"
            )
            button_3.click()
            logger.info("‚úÖ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '3'")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "="
            button_equals = self.driver.find_element(
                AppiumBy.XPATH, 
                "//android.widget.Button[@text='=']"
            )
            button_equals.click()
            logger.info("‚úÖ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '='")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            time.sleep(1)
            try:
                # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–æ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                result_field = self.driver.find_element(
                    AppiumBy.XPATH, 
                    "//android.widget.TextView[contains(@resource-id, 'result')]"
                )
                result_text = result_field.text
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {result_text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç "5"
                if "5" in result_text:
                    logger.info("‚úÖ –ë–∞–∑–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    return True
                else:
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}")
                    return False
                    
            except NoSuchElementException:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {e}")
            return False
    
    def test_clear_function(self) -> bool:
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏")
            
            # –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–µ–º –∫–∞–∫–æ–µ-—Ç–æ —á–∏—Å–ª–æ
            button_5 = self.driver.find_element(
                AppiumBy.XPATH, 
                "//android.widget.Button[@text='5']"
            )
            button_5.click()
            logger.info("‚úÖ –í–≤–µ–ª–∏ —á–∏—Å–ª–æ '5'")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ (–æ–±—ã—á–Ω–æ "C" –∏–ª–∏ "Clear")
            try:
                clear_button = self.driver.find_element(
                    AppiumBy.XPATH, 
                    "//android.widget.Button[@text='C']"
                )
            except NoSuchElementException:
                clear_button = self.driver.find_element(
                    AppiumBy.XPATH, 
                    "//android.widget.Button[@text='Clear']"
                )
            
            clear_button.click()
            logger.info("‚úÖ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Å–ø–ª–µ–π –æ—á–∏—â–µ–Ω
            time.sleep(1)
            try:
                result_field = self.driver.find_element(
                    AppiumBy.XPATH, 
                    "//android.widget.TextView[contains(@resource-id, 'result')]"
                )
                result_text = result_field.text
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {result_text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ä–∞–≤–µ–Ω "0"
                if result_text == "" or result_text == "0":
                    logger.info("‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    return True
                else:
                    logger.error(f"‚ùå –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {result_text}")
                    return False
                    
            except NoSuchElementException:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏: {e}")
            return False
    
    def test_multiplication(self) -> bool:
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è (4 * 3 = 12)"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è (4 * 3 = 12)")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "4"
            button_4 = self.driver.find_element(
                AppiumBy.XPATH, 
                "//android.widget.Button[@text='4']"
            )
            button_4.click()
            logger.info("‚úÖ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '4'")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "*"
            button_multiply = self.driver.find_element(
                AppiumBy.XPATH, 
                "//android.widget.Button[@text='√ó']"
            )
            button_multiply.click()
            logger.info("‚úÖ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '√ó'")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "3"
            button_3 = self.driver.find_element(
                AppiumBy.XPATH, 
                "//android.widget.Button[@text='3']"
            )
            button_3.click()
            logger.info("‚úÖ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '3'")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "="
            button_equals = self.driver.find_element(
                AppiumBy.XPATH, 
                "//android.widget.Button[@text='=']"
            )
            button_equals.click()
            logger.info("‚úÖ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '='")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            time.sleep(1)
            try:
                result_field = self.driver.find_element(
                    AppiumBy.XPATH, 
                    "//android.widget.TextView[contains(@resource-id, 'result')]"
                )
                result_text = result_field.text
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è: {result_text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç "12"
                if "12" in result_text:
                    logger.info("‚úÖ –£–º–Ω–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    return True
                else:
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è: {result_text}")
                    return False
                    
            except NoSuchElementException:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è: {e}")
            return False
    
    def run_all_tests(self) -> dict:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        results = {}
        
        if not self.setup_driver():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä"}
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            results["app_launch"] = self.test_app_launch()
            results["basic_calculation"] = self.test_basic_calculation()
            results["clear_function"] = self.test_clear_function()
            results["multiplication"] = self.test_multiplication()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            passed = sum(results.values())
            total = len(results)
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
            
            if passed == total:
                logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.warning(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
            
            return results
            
        finally:
            self.cleanup()
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.driver:
            try:
                self.driver.quit()
                logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    
    tester = CalculatorTester()
    results = tester.run_all_tests()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê")
    print("="*60)
    
    for test_name, result in results.items():
        if isinstance(result, bool):
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{test_name}: {status}")
    
    print("="*60)


if __name__ == "__main__":
    main()


#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Notes/Keep
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Appium –∏ Python
"""

import time
import logging
from typing import Optional
from appium import webdriver
from appium.options.android import UiAutomator2Options
from appium.webdriver.common.appiumby import AppiumBy
from selenium.common.exceptions import NoSuchElementException, TimeoutException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test_results.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class MobileAppTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.driver: Optional[webdriver.Remote] = None
        self.appium_server_url = "http://127.0.0.1:4723"
        
    def setup_driver(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Appium –¥—Ä–∞–π–≤–µ—Ä—É"""
        try:
            desired_caps = {
                "platformName": "Android",
                "automationName": "UiAutomator2",
                "deviceName": "Android Emulator",
                "appPackage": "com.google.android.keep",  # Google Keep
                "appActivity": ".activities.BrowseActivity",
                "noReset": True,
                "newCommandTimeout": 60,
                "autoGrantPermissions": True,
                "unicodeKeyboard": True,
                "resetKeyboard": True
            }
            
            options = UiAutomator2Options().load_capabilities(desired_caps)
            self.driver = webdriver.Remote(self.appium_server_url, options=options)
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Appium —Å–µ—Ä–≤–µ—Ä—É")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Appium: {e}")
            return False
    
    def test_app_launch(self) -> bool:
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å
            current_activity = self.driver.current_activity
            logger.info(f"–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {current_activity}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            try:
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
                create_button = self.driver.find_element(
                    AppiumBy.ACCESSIBILITY_ID, 
                    "New text note"
                )
                logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
                return True
                
            except NoSuchElementException:
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                try:
                    create_button = self.driver.find_element(
                        AppiumBy.XPATH, 
                        "//android.widget.ImageButton[@content-desc='New text note']"
                    )
                    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä)")
                    return True
                except NoSuchElementException:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def test_create_note(self) -> bool:
        """–¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏")
            
            # –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
            create_button = None
            try:
                create_button = self.driver.find_element(
                    AppiumBy.ACCESSIBILITY_ID, 
                    "New text note"
                )
            except NoSuchElementException:
                try:
                    create_button = self.driver.find_element(
                        AppiumBy.XPATH, 
                        "//android.widget.ImageButton[@content-desc='New text note']"
                    )
                except NoSuchElementException:
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                    create_button = self.driver.find_element(
                        AppiumBy.XPATH, 
                        "//android.widget.TextView[@text='New text note']"
                    )
            
            create_button.click()
            logger.info("‚úÖ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")
            
            # –ñ–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∑–∞–º–µ—Ç–æ–∫
            time.sleep(2)
            
            # –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
            try:
                text_field = self.driver.find_element(
                    AppiumBy.XPATH, 
                    "//android.widget.EditText"
                )
                
                # –í–≤–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                test_text = "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                text_field.send_keys(test_text)
                logger.info(f"‚úÖ –í–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç: {test_text}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
                self.driver.back()
                time.sleep(2)
                
                logger.info("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
                return True
                
            except NoSuchElementException:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
            return False
    
    def test_gestures(self) -> bool:
        """–¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤")
            
            # –¢–µ—Å—Ç –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
            try:
                # –ò—â–µ–º –∑–∞–º–µ—Ç–∫—É –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
                notes = self.driver.find_elements(
                    AppiumBy.XPATH, 
                    "//android.widget.TextView[contains(@text, '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞')]"
                )
                
                if notes:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                    self.driver.tap([(notes[0].location['x'], notes[0].location['y'])], 2000)
                    logger.info("‚úÖ –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
                    time.sleep(1)
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é (–Ω–∞–∂–∏–º–∞–µ–º –≤–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–∞)
                    self.driver.tap([(100, 100)], 500)
                    logger.info("‚úÖ –ñ–µ—Å—Ç—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–µ—Å—Ç–æ–≤")
                    return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∂–µ—Å—Ç–æ–≤: {e}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∂–µ—Å—Ç–æ–≤: {e}")
            return False
    
    def test_screen_rotation(self) -> bool:
        """–¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
            current_orientation = self.driver.orientation
            logger.info(f"–¢–µ–∫—É—â–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {current_orientation}")
            
            # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —ç–∫—Ä–∞–Ω
            new_orientation = "LANDSCAPE" if current_orientation == "PORTRAIT" else "PORTRAIT"
            self.driver.orientation = new_orientation
            logger.info(f"–ü–æ–≤–µ—Ä–Ω—É–ª–∏ —ç–∫—Ä–∞–Ω –≤ {new_orientation}")
            
            # –ñ–¥–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ–≤–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
            try:
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                self.driver.find_element(
                    AppiumBy.XPATH, 
                    "//android.widget.TextView"
                )
                logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ–≤–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
                self.driver.orientation = current_orientation
                time.sleep(2)
                
                return True
                
            except NoSuchElementException:
                logger.error("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å –∫ –Ω–æ–≤–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {e}")
            return False
    
    def run_all_tests(self) -> dict:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        results = {}
        
        if not self.setup_driver():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä")
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä"}
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            results["app_launch"] = self.test_app_launch()
            results["create_note"] = self.test_create_note()
            results["gestures"] = self.test_gestures()
            results["screen_rotation"] = self.test_screen_rotation()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            passed = sum(results.values())
            total = len(results)
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
            
            if passed == total:
                logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.warning(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
            
            return results
            
        finally:
            self.cleanup()
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.driver:
            try:
                self.driver.quit()
                logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    tester = MobileAppTester()
    results = tester.run_all_tests()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*50)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    for test_name, result in results.items():
        if isinstance(result, bool):
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{test_name}: {status}")
    
    print("="*50)


if __name__ == "__main__":
    main()

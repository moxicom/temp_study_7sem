#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
–±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞
"""

import sys
import os
import logging
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class EnvironmentTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.results = {}
    
    def test_python_imports(self) -> bool:
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Python –º–æ–¥—É–ª–µ–π"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Python –º–æ–¥—É–ª–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
            import appium
            import selenium
            import requests
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏–∏ –º–æ–¥—É–ª–µ–π
            appium_version = getattr(appium, '__version__', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
            selenium_version = getattr(selenium, '__version__', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
            requests_version = getattr(requests, '__version__', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
            
            logger.info(f"‚úÖ Appium –≤–µ—Ä—Å–∏—è: {appium_version}")
            logger.info(f"‚úÖ Selenium –≤–µ—Ä—Å–∏—è: {selenium_version}")
            logger.info(f"‚úÖ Requests –≤–µ—Ä—Å–∏—è: {requests_version}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Appium –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            from appium import webdriver
            from appium.options.android import UiAutomator2Options
            from appium.webdriver.common.appiumby import AppiumBy
            
            logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except ImportError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    def test_config_loading(self) -> bool:
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –∫–æ–Ω—Ñ–∏–≥
            from test_config import TestConfig
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            assert TestConfig.APPIUM_SERVER_URL == "http://127.0.0.1:4723"
            assert "Android" in TestConfig.ANDROID_CONFIG["platformName"]
            assert "UiAutomator2" in TestConfig.ANDROID_CONFIG["automationName"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            apps = TestConfig.APPS_CONFIG
            assert "google_keep" in apps
            assert "calculator" in apps
            
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def test_appium_server_connection(self) -> bool:
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Appium —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Appium —Å–µ—Ä–≤–µ—Ä—É")
            
            import requests
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            response = requests.get("http://127.0.0.1:4723/status", timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                if data.get("value", {}).get("ready"):
                    logger.info("‚úÖ Appium —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤")
                    return True
                else:
                    logger.error("‚ùå Appium —Å–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤")
                    return False
            else:
                logger.error(f"‚ùå Appium —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
                return False
                
        except Exception as e:
            if "ConnectionError" in str(type(e)):
                logger.warning("‚ö†Ô∏è Appium —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è)")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Appium: {e}")
                return False
    
    def test_file_structure(self) -> bool:
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤")
            
            required_files = [
                "test_notes_app.py",
                "test_calculator_app.py", 
                "run_all_tests.py",
                "test_config.py",
                "requirements.txt",
                "Makefile",
                "README.md",
                "mobile_testing_checklist.md"
            ]
            
            missing_files = []
            for file in required_files:
                if not os.path.exists(file):
                    missing_files.append(file)
            
            if missing_files:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
                return False
            
            logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            return False
    
    def test_makefile_commands(self) -> bool:
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ Makefile"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ Makefile")
            
            import subprocess
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É help
            result = subprocess.run(
                ["make", "help"], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            
            if result.returncode == 0:
                help_output = result.stdout
                required_commands = [
                    "setup", "test", "run-emulator", "run-appium", 
                    "stop-all", "status", "logs"
                ]
                
                missing_commands = []
                for cmd in required_commands:
                    if cmd not in help_output:
                        missing_commands.append(cmd)
                
                if missing_commands:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–∞–Ω–¥—ã Makefile: {missing_commands}")
                    return False
                
                logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã Makefile —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå Makefile –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Makefile: {e}")
            return False
    
    def test_android_sdk(self) -> bool:
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ Android SDK"""
        try:
            logger.info("üîç –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ Android SDK")
            
            import subprocess
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º adb
            result = subprocess.run(
                ["adb", "version"], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            
            if result.returncode == 0:
                logger.info("‚úÖ Android SDK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                logger.info(f"ADB –≤–µ—Ä—Å–∏—è: {result.stdout.split()[2]}")
                return True
            else:
                logger.error("‚ùå Android SDK –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
                
        except FileNotFoundError:
            logger.error("‚ùå Android SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Android SDK: {e}")
            return False
    
    def run_all_tests(self) -> Dict[str, bool]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.info("=" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        self.results["python_imports"] = self.test_python_imports()
        self.results["config_loading"] = self.test_config_loading()
        self.results["appium_connection"] = self.test_appium_server_connection()
        self.results["file_structure"] = self.test_file_structure()
        self.results["makefile_commands"] = self.test_makefile_commands()
        self.results["android_sdk"] = self.test_android_sdk()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        passed = sum(self.results.values())
        total = len(self.results)
        
        logger.info("")
        logger.info("=" * 50)
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –û–ö–†–£–ñ–ï–ù–ò–Ø –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            logger.warning(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        logger.info("=" * 50)
        
        return self.results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    
    tester = EnvironmentTester()
    results = tester.run_all_tests()
    
    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("=" * 60)
    
    test_names = {
        "python_imports": "Python –º–æ–¥—É–ª–∏",
        "config_loading": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
        "appium_connection": "Appium —Å–µ—Ä–≤–µ—Ä",
        "file_structure": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤",
        "makefile_commands": "Makefile –∫–æ–º–∞–Ω–¥—ã",
        "android_sdk": "Android SDK"
    }
    
    for test_key, result in results.items():
        test_name = test_names.get(test_key, test_key)
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{test_name:20} {status}")
    
    print("=" * 60)
    
    # –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
    failed_count = sum(1 for result in results.values() if not result)
    if failed_count == 0:
        print("üéâ –û–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
        return 0
    else:
        print(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {failed_count} –ø—Ä–æ–±–ª–µ–º")
        return 1


if __name__ == "__main__":
    exit(main())
